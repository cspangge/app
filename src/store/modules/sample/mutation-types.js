/*
 不要修改这个文件 不要修改这个文件 不要修改这个文件 不要修改这个文件
 不要修改这个文件 不要修改这个文件 不要修改这个文件 不要修改这个文件
 不要修改这个文件 不要修改这个文件 不要修改这个文件 不要修改这个文件
 不要修改这个文件 不要修改这个文件 不要修改这个文件 不要修改这个文件
 不要修改这个文件 不要修改这个文件 不要修改这个文件 不要修改这个文件
 不要修改这个文件 不要修改这个文件 不要修改这个文件 不要修改这个文件
 不要修改这个文件 不要修改这个文件 不要修改这个文件 不要修改这个文件
 */
// 对mutations的统一管理
// 对mutations的统一管理，将所有函数用常量保存，它里面写的内容一般如下：
export const UPDATE_MESSAGE = 'updateMessage';

// 这样的好处是：
// 多人开发时，对mutations统一管理
// 将方法（函数）名统一保存后，找函数很直观，维护起来比较方便。
// 用常量来引用，可维护性更高
// 当你想修改一个方法名时，只需在这个文件里修改一次变量的值，而在项目的其它地方引用的都是该变量，不需要逐个去查找和修改。
// 可以根据模块分类来给mutation type命名，名字多长都可以，常量名简短就好了

// 注意：
// 使用常量替代 Mutation 事件类型在Vuex的文档中有提及
// 在[]中放入表达式，计算结果可以当做属性名。这种写法是出自 ES6风格的计算属性命名，待会在 mutations.js 文件中我们会用到。
// 如果个人小项目，就没必要特地拆分出 mutation-types.js 了，转来转去麻烦。
